{"version":3,"sources":["components/graph.jsx","components/dataform.jsx","App.js","serviceWorker.js","index.js"],"names":["Graph","props","data","principal","interest","amortPeriod","payFrequency","compoundFrequency","labelOne","labelTwo","labelThree","graphType","p","i","parseFloat","n","x","Math","pow","payment","interestPayment","principalPayment","totalInterest","equity","j","push","round","Equity","width","height","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","strokeDasharray","type","stroke","fillOpacity","fill","DataForm","state","window","innerHeight","innerWidth","value","amortPer","payFreq","compoundFreq","updateDimensions","bind","handleChangePrincipal","handleChangeInterest","handleChangeAmortPeriod","handleChangePayFreq","handleChangeCompoundFreq","handleChangeGraphType","event","this","setState","target","addEventListener","className","htmlFor","onChange","map","item","key","name","removeEventListener","Component","App","Fragment","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.285323bd.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from \"recharts\";\n\nfunction Graph(props) {\n  /* Initializing function variables */\n\n  const data = [];\n  var principal = props.principal;\n  var interest = props.interest;\n  var amortPeriod = props.amortPeriod;\n  var payFrequency = props.payFrequency;\n  var compoundFrequency = props.compoundFrequency;\n  var labelOne = \"\";\n  var labelTwo = \"\";\n  var labelThree = \"\";\n\n  /* Determining what graph type to display */\n\n  if (props.graphType === \"PaymentBreakdown\") {\n    labelOne = \"Interest Payment\";\n    labelTwo = \"Principal Payment\";\n    labelThree = \"Total Payment\";\n  } else if (props.graphType === \"TotalInterestAndEquity\") {\n    labelOne = \"Total Interest\";\n    labelTwo = \"Equity\";\n    labelThree = null;\n  }\n\n  /* Rendering graph if all parameters are entered */\n\n  if (\n    interest !== \"\" &&\n    principal !== \"\" &&\n    amortPeriod !== \"\" &&\n    payFrequency !== \"\" &&\n    compoundFrequency !== \"\" &&\n    labelOne !== \"\"\n  ) {\n    var p = principal;\n    var i = parseFloat(interest) / 100;\n    var n = amortPeriod;\n    var x = 0;\n\n    switch (payFrequency) {\n      case \"weekly\":\n        x = 52;\n        break;\n      case \"bi-weekly\":\n        x = 26;\n        break;\n      case \"monthly\":\n        x = 12;\n        break;\n      default:\n        x = 12;\n    }\n\n    switch (compoundFrequency) {\n      case \"monthly\":\n        i = i / x;\n        break;\n      case \"semi-annually\":\n        i = Math.pow(1 + i / 2, 2 / x) - 1;\n        break;\n      default:\n        i = i / x;\n    }\n\n    /* Calculating monthly payment */\n\n    const payment = (p * i) / (1 - Math.pow(1 + i, -n * x));\n\n    var interestPayment = 0;\n    var principalPayment = 0;\n    var totalInterest = 0;\n    var equity = 0;\n\n    /* Building array of objects containing monthly payment data*/\n\n    for (let j = 0; j < x * n; j++) {\n      interestPayment = p * i;\n      totalInterest = totalInterest + interestPayment;\n      principalPayment = payment - interestPayment;\n      equity = equity + principalPayment;\n      data.push({\n        \"Payment Number\": j + 1,\n        \"Opening Balance\": Math.round(100 * p) / 100,\n        \"Interest Payment\": Math.round(100 * interestPayment) / 100,\n        \"Principal Payment\": Math.round(100 * principalPayment) / 100,\n        \"Total Payment\": Math.round(100 * payment) / 100,\n        \"Total Interest\": Math.round(100 * totalInterest) / 100,\n        \"Closing Balance\": Math.round(100 * (p - principalPayment)) / 100,\n        Equity: Math.round(100 * equity) / 100,\n      });\n      p = p - principalPayment;\n    }\n\n    /* Returning graph with data for user-defined parameters*/\n\n    return (\n      <div>\n        <AreaChart\n          width={props.width}\n          height={600}\n          data={data}\n          margin={{ top: 0, right: 50, left: 50, bottom: 50 }}\n        >\n          <defs>\n            <linearGradient id=\"gradientOne\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\n            </linearGradient>\n            <linearGradient id=\"gradientTwo\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n            </linearGradient>\n            <linearGradient id=\"gradientThree\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#4287f5\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#4287f5\" stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          <XAxis dataKey=\"Payment Number\" />\n          <YAxis />\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Tooltip />\n\n          <Area\n            type=\"monotone\"\n            dataKey={labelThree}\n            stroke=\"#4287f5\"\n            fillOpacity={1}\n            fill=\"url(#gradientThree)\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey={labelOne}\n            stroke=\"#8884d8\"\n            fillOpacity={1}\n            fill=\"url(#gradientOne)\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey={labelTwo}\n            stroke=\"#82ca9d\"\n            fillOpacity={1}\n            fill=\"url(#gradientTwo)\"\n          />\n        </AreaChart>\n      </div>\n    );\n  } else {\n    /* Returning null if all parameters are not set*/\n\n    return null;\n  }\n}\n\nexport default Graph;\n","import React, { Component } from \"react\";\nimport Graph from \"./graph\";\n\nclass DataForm extends Component {\n  state = {};\n\n  /* Initializing instance variables */\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: window.innerHeight,\n      width: window.innerWidth,\n      value: \"\",\n      interest: \"\",\n      principal: \"\",\n      amortPeriod: \"\",\n      payFrequency: \"\",\n      compoundFrequency: \"\",\n      amortPer: [\n        { id: \"1 year\", value: 1 },\n        { id: \"2 years\", value: 2 },\n        { id: \"3 years\", value: 3 },\n        { id: \"4 years\", value: 4 },\n        { id: \"5 years\", value: 5 },\n        { id: \"6 years\", value: 6 },\n        { id: \"7 years\", value: 7 },\n        { id: \"8 years\", value: 8 },\n        { id: \"9 years\", value: 9 },\n        { id: \"10 years\", value: 10 },\n        { id: \"11 years\", value: 11 },\n        { id: \"12 years\", value: 12 },\n        { id: \"13 years\", value: 13 },\n        { id: \"14 years\", value: 14 },\n        { id: \"15 years\", value: 15 },\n        { id: \"16 years\", value: 16 },\n        { id: \"17 years\", value: 17 },\n        { id: \"18 years\", value: 18 },\n        { id: \"19 years\", value: 19 },\n        { id: \"20 years\", value: 20 },\n        { id: \"21 years\", value: 21 },\n        { id: \"22 years\", value: 22 },\n        { id: \"23 years\", value: 23 },\n        { id: \"24 years\", value: 24 },\n        { id: \"25 years\", value: 25 },\n        { id: \"26 years\", value: 26 },\n        { id: \"27 years\", value: 27 },\n        { id: \"28 years\", value: 28 },\n        { id: \"29 years\", value: 29 },\n        { id: \"30 years\", value: 30 },\n      ],\n\n      payFreq: [\n        { id: \"weekly\", value: \"weekly\" },\n        { id: \"bi-weekly\", value: \"bi-weekly\" },\n        { id: \"monthly\", value: \"monthly\" },\n      ],\n      compoundFreq: [\n        { id: \"semi-annually\", value: \"semi-annually\" },\n        { id: \"perMonth\", value: \"monthly\" },\n      ],\n\n      graphType: \"\",\n    };\n\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.handleChangePrincipal = this.handleChangePrincipal.bind(this);\n    this.handleChangeInterest = this.handleChangeInterest.bind(this);\n    this.handleChangeAmortPeriod = this.handleChangeAmortPeriod.bind(this);\n    this.handleChangePayFreq = this.handleChangePayFreq.bind(this);\n    this.handleChangeCompoundFreq = this.handleChangeCompoundFreq.bind(this);\n    this.handleChangeGraphType = this.handleChangeGraphType.bind(this);\n  }\n\n  /* Updating form input field and select values */\n\n  handleChangePrincipal(event) {\n    this.setState({ principal: event.target.value });\n  }\n  handleChangeInterest(event) {\n    this.setState({ interest: event.target.value });\n  }\n  handleChangeAmortPeriod(event) {\n    this.setState({ amortPeriod: event.target.value });\n  }\n  handleChangePayFreq(event) {\n    this.setState({ payFrequency: event.target.value });\n  }\n\n  handleChangeCompoundFreq(event) {\n    this.setState({ compoundFrequency: event.target.value });\n  }\n\n  handleChangeGraphType(event) {\n    this.setState({ graphType: event.target.value });\n  }\n\n  /* Adding event listener for resizing window and updating height and width of window */\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions);\n  }\n  updateDimensions() {\n    this.setState({\n      height: window.innerHeight,\n      width: window.innerWidth,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"display-4 col-md-12 text-center mt-5\">\n          Mortgage Visualizer\n        </h1>\n        <form className=\"form m-5\">\n          <div className=\"form-row\">\n            <div className=\"col-md-8 mb-4\">\n              <label htmlFor=\"inputPrincipalValue\">Principal Value</label>\n              <div className=\"input-group\">\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">$</span>\n                </div>\n                <input\n                  id=\"inputPrincipalValue\"\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={this.state.principal}\n                  onChange={this.handleChangePrincipal}\n                />\n              </div>\n            </div>\n\n            <div className=\"col-md-4 mb-4\">\n              <label htmlFor=\"inputInterest\">Interest Rate</label>\n              <div className=\"input-group\">\n                <input\n                  id=\"inputInterest\"\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={this.state.interest}\n                  onChange={this.handleChangeInterest}\n                />\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\">%</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"col-md-4 mb-4\">\n              <label htmlFor=\"selectAmortizationPeriod\">\n                Amortization Period\n              </label>\n              <div className=\"input-group\">\n                <select\n                  id=\"selectAmortizationPeriod\"\n                  className=\"custom-select form-control\"\n                  value={this.state.amortPeriod}\n                  onChange={this.handleChangeAmortPeriod}\n                >\n                  <option></option>\n                  {this.state.amortPer.map((item) => (\n                    <option key={item.id} id={item.id}>\n                      {item.value}\n                    </option>\n                  ))}\n                </select>\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\">Years</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-md-4 mb-4\">\n              <label htmlFor=\"selectPaymentFrequency\">Payment Frequency</label>\n              <select\n                id=\"selectPaymentFrequency\"\n                className=\"custom-select\"\n                value={this.state.payFrequency}\n                onChange={this.handleChangePayFreq}\n              >\n                <option></option>\n                {this.state.payFreq.map((item) => (\n                  <option key={item.id} id={item.id}>\n                    {item.value}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"col-md-4 mb-4\">\n              <label htmlFor=\"selectCompoundingFrequency\">\n                Compounding Frequency\n              </label>\n              <select\n                id=\"selectCompoundingFrequency\"\n                className=\"custom-select\"\n                value={this.state.compoundFrequency}\n                onChange={this.handleChangeCompoundFreq}\n              >\n                <option></option>\n                {this.state.compoundFreq.map((item) => (\n                  <option key={item.id} id={item.id}>\n                    {item.value}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          <h5 className=\"mb-2\">Chart Type: </h5>\n          <div className=\"custom-control custom-radio custom-control-inline\">\n            <input\n              type=\"radio\"\n              id=\"customRadioInline1\"\n              name=\"customRadioInline1\"\n              className=\"custom-control-input\"\n              value=\"PaymentBreakdown\"\n              onChange={this.handleChangeGraphType}\n            />\n            <label\n              className=\"custom-control-label\"\n              htmlFor=\"customRadioInline1\"\n            >\n              Payment Breakdown\n            </label>\n          </div>\n          <div className=\"custom-control custom-radio custom-control-inline\">\n            <input\n              type=\"radio\"\n              id=\"customRadioInline2\"\n              name=\"customRadioInline1\"\n              className=\"custom-control-input\"\n              value=\"TotalInterestAndEquity\"\n              onChange={this.handleChangeGraphType}\n            />\n            <label\n              className=\"custom-control-label\"\n              htmlFor=\"customRadioInline2\"\n            >\n              Total Interest and Equity\n            </label>\n          </div>\n        </form>\n\n        <Graph\n          width={this.state.width}\n          graphType={this.state.graphType}\n          principal={this.state.principal}\n          interest={this.state.interest}\n          amortPeriod={this.state.amortPeriod}\n          payFrequency={this.state.payFrequency}\n          compoundFrequency={this.state.compoundFrequency}\n        />\n      </div>\n    );\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions);\n  }\n}\n\nexport { DataForm };\n","import React from \"react\";\nimport \"./App.css\";\nimport { DataForm } from \"./components/dataform.jsx\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <DataForm />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}